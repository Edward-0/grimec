mod grimec::main

type Module : []

type Token : []

ext def func setLogLevel(Int) -> Void

ext def func readFile([UByte]) -> [UByte]

ext def func lex([UByte]) -> [Token]

ext def func parse([Token]) -> Module

ext def func codeGenLLVM(Module) -> []

ext def func delModule(Module) -> Void

ext def func delTokens([Token]) -> Void

ext def func memFree([UByte]) -> Void

ext def func memLog() -> Void

ext def func puts([UByte]) -> Void

ext def func resolveTypes(Module) -> Void

func main(argc: Int, argv: [[UByte]]) -> Int {

	setLogLevel(1)

    if (argc > 1) {
        var fileName: [UByte] := argv[1]

        var source: [UByte] := readFile(fileName)
	
	    var tokens: [Token] := lex(source)
	
	    var tree: Module := parse(tokens)
	
        resolveTypes(tree)

        codeGenLLVM(tree)
		
	    delModule(tree)

	    delTokens(tokens)
		
	    memFree(source)
		
	    memLog()
        ret := 0
    }
    ret := 0
}
